[{"path":"https://github.com/BioPsyk/PAFGRS.git/articles/kinship-tutorial.html","id":"load-pafgrs-package","dir":"Articles","previous_headings":"","what":"Load PAFGRS package","title":"Kinship Tutorial","text":"","code":"library(kinship2) ## Loading required package: Matrix ## Loading required package: quadprog library(PAFGRS)"},{"path":"https://github.com/BioPsyk/PAFGRS.git/articles/kinship-tutorial.html","id":"load-family-data","dir":"Articles","previous_headings":"","what":"Load family data","title":"Kinship Tutorial","text":"demonstating load publicly available data Minnesota Breast Cancer Family Study.","code":"data(\"minnbreast\")  head(minnbreast[minnbreast$famid==4,1:7]) ##   id proband fatherid motherid famid   endage cancer ## 1  1       0        0        0     4       NA      0 ## 2  2       0        0        0     4 78.05886      0 ## 3  3       0       25        4     4 55.50000      0 ## 4  4       1        1        2     4 48.00000      1 ## 5  5       0        1        2     4 75.00342      0 ## 6  6       0        1        2     4 53.63997      0"},{"path":"https://github.com/BioPsyk/PAFGRS.git/articles/kinship-tutorial.html","id":"many-small-pedigrees","dir":"Articles","previous_headings":"","what":"Many small pedigrees","title":"Kinship Tutorial","text":"small pedigrees kinship can efficiently estimated using kinship2 r-package:","code":"data(minnbreast) bpeds <- with(minnbreast,pedigree(id, fatherid, motherid, sex, affected=proband, famid=famid)) k <- kinship(bpeds) dim(k) ## [1] 28081 28081"},{"path":"https://github.com/BioPsyk/PAFGRS.git/articles/kinship-tutorial.html","id":"a-single-large-pedigree","dir":"Articles","previous_headings":"","what":"A single large pedigree","title":"Kinship Tutorial","text":"can explore idea single large pedigree looking looking famid: object quickly become hard store memory. However can take advantage fact matrix sparse: , can also estimate kinship coefficients pedigrees scale path counting algorithm :","code":"single_ped <- with(minnbreast[minnbreast$famid %in% 4:200,],pedigree(id, fatherid, motherid, sex, affected=proband)) single_ped ## Pedigree object with 9083 subjects ## Bit size= 5938 system.time(k <- kinship(single_ped)) ##    user  system elapsed  ##   2.053   8.037  10.114 dim(k) ## [1] 9083 9083 format(object.size(k),units=\"Mb\") ## [1] \"630.5 Mb\" system.time(k_sparse <- kinship_sparse(single_ped)) ##    user  system elapsed  ##  21.426   2.110  23.540 dim(k_sparse) ## [1] 9083 9083 format(object.size(k_sparse),units=\"Mb\") ## [1] \"5 Mb\" system.time(k_sparse_path <- kinship_path(single_ped)) ##    user  system elapsed  ## 180.054   1.833 181.442 dim(k_sparse_path) ## [1] 9083 9083 format(object.size(k_sparse_path),units=\"Mb\") ## [1] \"5 Mb\" identical(k_sparse_path,k_sparse) ## [1] TRUE"},{"path":"https://github.com/BioPsyk/PAFGRS.git/articles/tutorial.html","id":"load-pafgrs-package","dir":"Articles","previous_headings":"","what":"Load PAFGRS package","title":"Tutorial","text":"","code":"library(\"PAFGRS\")"},{"path":"https://github.com/BioPsyk/PAFGRS.git/articles/tutorial.html","id":"load-family-data","dir":"Articles","previous_headings":"","what":"Load family data","title":"Tutorial","text":"demonstation PAFGRS method load publicly available data Minnesota Breast Cancer Family Study.","code":"library(\"FamAgg\") ## Loading required package: kinship2 ## Loading required package: Matrix ## Loading required package: quadprog ## Loading required package: igraph ##  ## Attaching package: 'igraph' ## The following objects are masked from 'package:stats': ##  ##     decompose, spectrum ## The following object is masked from 'package:base': ##  ##     union ##  ## Attaching package: 'FamAgg' ## The following object is masked from 'package:igraph': ##  ##     cliques ## The following object is masked from 'package:kinship2': ##  ##     pedigree data(\"minnbreast\")  head(minnbreast[minnbreast$famid==4,1:7]) ##   id proband fatherid motherid famid   endage cancer ## 1  1       0        0        0     4       NA      0 ## 2  2       0        0        0     4 78.05886      0 ## 3  3       0       25        4     4 55.50000      0 ## 4  4       1        1        2     4 48.00000      1 ## 5  5       0        1        2     4 75.00342      0 ## 6  6       0        1        2     4 53.63997      0"},{"path":"https://github.com/BioPsyk/PAFGRS.git/articles/tutorial.html","id":"compute-a-kinship-matrix-for-one-family","dir":"Articles","previous_headings":"","what":"Compute a kinship matrix for one family","title":"Tutorial","text":"Using  package, can compute kinship matrix follows:","code":"ped_data <- minnbreast[minnbreast$famid==4,c(1:7,14)] # generate pedigree ped <- pedigree(id = ped_data$id,dadid = ped_data$fatherid,momid = ped_data$motherid,                 sex = ped_data$sex,affected = ped_data$cancer&ped_data$sex==\"F\", status=) # compute kinsip matrix:  k <- kinship2::kinship(ped)  plot(ped) ## Did not plot the following people: 30 31 32 33 34 35 36 37 38 39 40 41 42 43"},{"path":"https://github.com/BioPsyk/PAFGRS.git/articles/tutorial.html","id":"generate-covariance-matrix","dir":"Articles","previous_headings":"","what":"Generate covariance matrix:","title":"Tutorial","text":"simplifying assumption (e.g. shared environment, inbreeding assortative mating) known heritability, covariance liabilities can specified :","code":"r <- k*2 h2= 0.5  covmat <- h2*r  diag(covmat) <- 1"},{"path":[]},{"path":"https://github.com/BioPsyk/PAFGRS.git/articles/tutorial.html","id":"naïve-estimator","dir":"Articles","previous_headings":"Estimate liability of one individual:","what":"Naïve estimator","title":"Tutorial","text":"naiv estimator genetic liability first individual, assuming individuals risk can computed :","code":"covmat <- covmat[c(3,(1:nrow(covmat))[-3]),c(3,(1:nrow(covmat))[-3])] covmat[1,1] <- h2  ped_data[ped_data$sex==\"M\",]$cancer <- 0  status <- ped_data[-3,]$cancer prev <- .05 thr <- qnorm(1-prev)  pa_fgrs(rel_status = status, covmat = covmat ,thr = thr) ##     postM   postVar  ## 0.2976872 0.4059127"},{"path":"https://github.com/BioPsyk/PAFGRS.git/articles/tutorial.html","id":"sex-specific","dir":"Articles","previous_headings":"Estimate liability of one individual:","what":"Sex-specific","title":"Tutorial","text":"think individuals higher threshold others, can specify follows:","code":"ped_data$prev <- .1 ped_data$prev[ped_data$sex==\"M\"] <- 0 ped_data$thr <- qnorm(1-ped_data$prev)  pa_fgrs(rel_status = status, covmat = covmat,rel_thr = ped_data$thr[-3]) ##     postM   postVar  ## 0.2364125 0.4161463"},{"path":"https://github.com/BioPsyk/PAFGRS.git/articles/tutorial.html","id":"taking-censoring-into-account","dir":"Articles","previous_headings":"Estimate liability of one individual:","what":"Taking censoring into account","title":"Tutorial","text":"Assuming know cumulative incidence curve can assign mixture distribution censored individuals:","code":"plot(sapply(1:100,function(x) {   w=(x -20 )/80   ifelse(w<0,0,w)*.1}),type = \"l\",ylab = \"Cumulative Incidence in Females\",xlab = \"Age\") ped_data$w <-(ped_data$endage -20 )/80 ped_data$w[ped_data$w<0] <- 0 ped_data$w[ped_data$cancer==1] <- 1  pa_fgrs(rel_status = status, covmat = covmat,rel_thr = ped_data$thr[-3],rel_w = ped_data$w[-3]) ##     postM   postVar  ## 0.3214846 0.4312186"},{"path":"https://github.com/BioPsyk/PAFGRS.git/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Morten Krebs. Author, maintainer. Jesper Gådin. Author. Andrew Schork. Author.","code":""},{"path":"https://github.com/BioPsyk/PAFGRS.git/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Krebs M, Gådin J, Schork (2023). PAFGRS: PA-FGRS estimates genetic liabilities phenotypic data genetic relatives, accounting censoring allowing arbitrarily structured pedigrees.. R package version 0.1.0.","code":"@Manual{,   title = {PAFGRS: PA-FGRS estimates genetic liabilities from phenotypic data of genetic relatives, while accounting for censoring and allowing for arbitrarily structured pedigrees.},   author = {Morten Krebs and Jesper Gådin and Andrew Schork},   year = {2023},   note = {R package version 0.1.0}, }"},{"path":[]},{"path":"https://github.com/BioPsyk/PAFGRS.git/index.html","id":"comprehensive-guide","dir":"","previous_headings":"","what":"Comprehensive Guide","title":"PA-FGRS estimates genetic liabilities from phenotypic data of genetic relatives, while accounting for censoring and allowing for arbitrarily structured pedigrees.","text":"-depth tutorial elucidating usage functionalities PA-FGRS available Articles section https://biopsyk.github.io/PAFGRS wish delve deeper regenerate vignette, requisite code provided . Please execute R environment desired output. vignette format .html, .R .RMD can now found doc folder.","code":"# Make sure to clone this repository git clone git@github.com:BioPsyk/PAFGRS.git  # Enter the cloned repository cd PAFGRS  # Start R and run library(devtools) build_vignettes()"},{"path":"https://github.com/BioPsyk/PAFGRS.git/reference/FGRS.html","id":null,"dir":"Reference","previous_headings":"","what":"FGRS — FGRS","title":"FGRS — FGRS","text":"implementations Kendler et al.","code":""},{"path":"https://github.com/BioPsyk/PAFGRS.git/reference/FGRS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"FGRS — FGRS","text":"","code":"FGRS(   df,   stat_cols = which(grepl(\"stat\", colnames(df))),   age_cols = which(grepl(\"age\", colnames(df))),   rel_mat,   prev,   env_cor = 1,   aoo )"},{"path":"https://github.com/BioPsyk/PAFGRS.git/reference/FGRS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"FGRS — FGRS","text":"df data.frame one row per individual columns containing phenotype information relatives stat_cols vector names columns containing disease status relatives age_cols vector names columns containing age relatives rel_mat relatedness matrix first row column correponding index person subsequent rows relatives. prev numeric indicating disease prevalence env_cor optional numeric. Factor first degree relatives downweighted. aoo function transforms age values proportion risk experienced individual","code":""},{"path":"https://github.com/BioPsyk/PAFGRS.git/reference/kinship_sparse.html","id":null,"dir":"Reference","previous_headings":"","what":"kinship sparse — kinship_sparse","title":"kinship sparse — kinship_sparse","text":"Compute sparse kinship matrix pedigree data, pedigree object pedigreeList object","code":""},{"path":"https://github.com/BioPsyk/PAFGRS.git/reference/kinship_sparse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"kinship sparse — kinship_sparse","text":"","code":"kinship_sparse(id, ...)  # S3 method for default kinship_sparse(id, dadid, momid, sex, chrtype = \"autosome\", ...)  # S3 method for pedigree kinship_sparse(id, chrtype = \"autosome\", ...)  # S3 method for pedigreeList kinship_sparse(id, chrtype = \"autosome\", ...)"},{"path":"https://github.com/BioPsyk/PAFGRS.git/reference/kinship_sparse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"kinship sparse — kinship_sparse","text":"id either pedigree object, pedigreeList object, vector subject identifiers.  Subject identifiers may numeric character. ... extra arguments pass forward internal functions. dadid subject, identifier biological father. used id vector. momid subject, identifier biological mother. used id vector. sex vector sex values coded 1=male, 2=female chrtype chromosome type.  currently supported types \"autosome\" \"X\" \"x\".","code":""},{"path":"https://github.com/BioPsyk/PAFGRS.git/reference/kinship_sparse.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"kinship sparse — kinship_sparse","text":"minor modification kinship2::kinship() function. difference kinship matrix returned function always sparse matrix. can usefull working large interconnected pedigrees, cut smaller pedigrees kinship2::makefamid function.","code":""},{"path":"https://github.com/BioPsyk/PAFGRS.git/reference/kinship_sparse.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"kinship sparse — kinship_sparse","text":"Sinnwell J, P, Therneau T, M, Schaid D, J: kinship2 R Package Pedigree Data. Hum Hered 2014;78:91-93. doi: 10.1159/000363105","code":""},{"path":"https://github.com/BioPsyk/PAFGRS.git/reference/kinship_sparse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"kinship sparse — kinship_sparse","text":"","code":"library(kinship2) #> Loading required package: Matrix #> Loading required package: quadprog data(minnbreast) mb <- minnbreast bpeds <- pedigree(mb$id, mb$fatherid, mb$motherid,                    mb$sex, affected=mb$proband,           famid=mb$famid)  identical(as.matrix(kinship_sparse(bpeds[1])),kinship(bpeds[1]))   #> [1] TRUE  mb2 <- minnbreast[minnbreast$famid==4,]  identical(    kinship(mb2$id,mb2$fatherid,mb2$motherid,mb2$sex),    as.matrix(kinship_sparse(mb2$id, mb2$fatherid, mb2$motherid, mb2$sex)) ) #> [1] TRUE  # Note that these are not very efficient: mb3 <- minnbreast[minnbreast$famid %in% 4:50,] system.time(kinship_sparse(mb3$id, mb3$fatherid, mb3$motherid, mb3$sex)) #>    user  system elapsed  #>   7.419   0.093   7.512  system.time(kinship_sparse(pedigree(mb3$id, mb3$fatherid, mb3$motherid, mb3$sex))) #>    user  system elapsed  #>   3.251   0.029   3.279   # Splitting into families and computing per per family is much faster:  system.time(makefamid(mb3$id, mb3$fatherid, mb3$motherid)) #>    user  system elapsed  #>   0.050   0.000   0.049  system.time(kinship(pedigree(mb3$id, mb3$fatherid, mb3$motherid, mb3$sex, famid=mb3$famid))) #>    user  system elapsed  #>   0.060   0.000   0.061"},{"path":"https://github.com/BioPsyk/PAFGRS.git/reference/kinship_sparse_path.html","id":null,"dir":"Reference","previous_headings":"","what":"kinship sparse path — kinship_path","title":"kinship sparse path — kinship_path","text":"Compute sparse kinship matrix pedigree object using path counting","code":""},{"path":"https://github.com/BioPsyk/PAFGRS.git/reference/kinship_sparse_path.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"kinship sparse path — kinship_path","text":"","code":"kinship_path(ped)"},{"path":"https://github.com/BioPsyk/PAFGRS.git/reference/kinship_sparse_path.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"kinship sparse path — kinship_path","text":"ped pedigree object","code":""},{"path":"https://github.com/BioPsyk/PAFGRS.git/reference/kinship_sparse_path.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"kinship sparse path — kinship_path","text":"alternative way computing kinhips matrix usually slower, less memory intense.","code":""},{"path":"https://github.com/BioPsyk/PAFGRS.git/reference/kinship_sparse_path.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"kinship sparse path — kinship_path","text":"","code":"library(kinship2) data(minnbreast) mb <- minnbreast[minnbreast$famid %in% 4:5,] system.time(k_path <- kinship_path(      pedigree(mb$id, mb$fatherid, mb$motherid, mb$sex))) #>    user  system elapsed  #>   0.514   0.004   0.497  system.time(k_sparse <- kinship_sparse(      pedigree(mb$id, mb$fatherid, mb$motherid, mb$sex))) #>    user  system elapsed  #>   0.052   0.000   0.053  system.time(k_per_fam <- kinship(      pedigree(mb$id, mb$fatherid, mb$motherid, mb$sex, famid=mb$famid))) #>    user  system elapsed  #>   0.004   0.000   0.003  identical(k_path,k_sparse)  #> [1] TRUE val1=!k_path[order(rownames(k_path)),order(rownames(k_path))] val2=k_per_fam[order(rownames(k_per_fam)),order(rownames(k_per_fam))] sum(val1==val2) #> [1] 0"},{"path":"https://github.com/BioPsyk/PAFGRS.git/reference/pa_fgrs.html","id":null,"dir":"Reference","previous_headings":"","what":"PA-FGRS — pa_fgrs","title":"PA-FGRS — pa_fgrs","text":"Compute posterior mean variance liability index person given disease status, thresholds proportion risk observed relatives.","code":""},{"path":"https://github.com/BioPsyk/PAFGRS.git/reference/pa_fgrs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"PA-FGRS — pa_fgrs","text":"","code":"pa_fgrs(   rel_status,   thr = NA,   rel_thr = rep(thr, length(rel_status)),   rel_w = rep(1, length(rel_status)),   covmat,   i_status = NA,   i_thr = thr,   i_w = 1,   conditional.mix = T )"},{"path":"https://github.com/BioPsyk/PAFGRS.git/reference/pa_fgrs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"PA-FGRS — pa_fgrs","text":"rel_status vector status relatives 1=affected, 0=affected, NA= missing thr threshold value used individuals (relatives index person) rel_thr optional vector specific threshold relative rel_w optional vector proportion risk experienced relative covmat covariance matrix liabilities. First row column correspoding index person,subsequent rows columns corresponding relatives. i_status optional status index person, considered 1=affected, 0=affected, NA= missing i_thr optional specific threshold index person i_w optional proportion risk experienced index person conditional.mix logical indicator wether mixture proportions conditional (default=TRUE).","code":""},{"path":"https://github.com/BioPsyk/PAFGRS.git/reference/pa_fgrs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"PA-FGRS — pa_fgrs","text":"","code":"pa_fgrs(c(0,1),qnorm(.9),covmat = matrix(c(.5,.25,.25,.25,1,.25,.25,.25,1),3)) #>     postM   postVar  #> 0.3695726 0.4311061"}]
